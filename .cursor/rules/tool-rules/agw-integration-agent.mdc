---
description: This rule provides best practices for integrating Abstract Global Wallet (AGW) into applications. Apply this rule when: (1) Implementing AGW wallet functionality, (2) Setting up authentication flows with AGW, (3) Handling transactions through AGW smart contracts, (4) Managing wallet deployment and connections, or (5) Optimizing AGW performance and security. Following these practices ensures proper integration with Abstract's account abstraction system, maintains security standards, and provides users with a seamless wallet experience across applications built on Abstract.
globs: 
alwaysApply: false
---
---
description: This rule provides best practices for integrating Abstract Global Wallet (AGW) into applications. Apply this rule when: (1) Implementing AGW wallet functionality, (2) Setting up authentication flows with AGW, (3) Handling transactions through AGW smart contracts, (4) Managing wallet deployment and connections, or (5) Optimizing AGW performance and security. Following these practices ensures proper integration with Abstract's account abstraction system, maintains security standards, and provides users with a seamless wallet experience across applications built on Abstract.
globs: 
alwaysApply: false
---

# Abstract Global Wallet Integration Best Practices

## Critical Rules

- Always wrap your application with `AbstractWalletProvider` when integrating AGW
- Instantiate the Abstract client using `createAbstractClient` with proper chain and signer parameters
- Store wallet shares securely following AGW's security model (device share, auth share)
- Handle both new wallet creation and existing wallet connection flows
- Use appropriate hooks from `agw-react` for React applications: `useAbstractClient`, `useLogin`, `useWalletState`
- Implement proper transaction approval UX with clear feedback to users
- For transactions, use the AGW client to send from the smart contract wallet, not the EOA signer
- Consider implementing gas-sponsored transactions using paymasters when appropriate
- Separate wallet connection concerns from application business logic
- Provide clear error handling for wallet operations (deployment, connection, transaction signing)
- Follow Abstract's native account abstraction patterns rather than attempting to make AGW chain-agnostic

## Examples

<example>
  // Proper AbstractWalletProvider setup
  import { AbstractWalletProvider } from "@abstract-foundation/agw-react";
  
  function App() {
    return (
      <AbstractWalletProvider
        appId="your-app-id"
        chainId={12345} // Abstract testnet
      >
        <YourApp />
      </AbstractWalletProvider>
    );
  }
  
  // Correct client instantiation and transaction
  import { createAbstractClient } from "@abstract-foundation/agw-client";
  import { useAbstractClient } from "@abstract-foundation/agw-react";
  
  function SendTransaction() {
    const { data: client } = useAbstractClient();
    
    async function handleSend() {
      if (!client) return;
      
      const hash = await client.sendTransaction({
        to: "0x273B3527BF5b607dE86F504fED49e1582dD2a1C6",
        data: "0x69",
        // Optional gas sponsorship
        paymaster: "0x5407B5040dec3D339A9247f3654E59EEccbb6391",
        paymasterInput: getGeneralPaymasterInput({
          innerInput: "0x",
        }),
      });
      
      // Show transaction success
    }
    
    return <button onClick={handleSend}>Send Transaction</button>;
  }
</example>

<example type="invalid">
  // Missing AbstractWalletProvider
  function App() {
    return <YourApp />;
  }
  
  // Incorrect transaction sending (using EOA directly instead of AGW)
  import { createWalletClient } from "viem";
  
  function SendTransaction() {
    const walletClient = createWalletClient({
      account,
      chain: abstractTestnet,
    });
    
    async function handleSend() {
      // WRONG: Sending directly from EOA, not through AGW
      const hash = await walletClient.sendTransaction({
        to: "0x273B3527BF5b607dE86F504fED49e1582dD2a1C6",
        data: "0x69",
      });
    }
    
    return <button onClick={handleSend}>Send</button>;
  }
  
  // No error handling or loading states
  function SendTransaction() {
    const { data: client } = useAbstractClient();
    
    async function handleSend() {
      // WRONG: No error handling or loading states
      const hash = await client.sendTransaction({
        to: "0x273B3527BF5b607dE86F504fED49e1582dD2a1C6",
        data: "0x69",
      });
    }
    
    return <button onClick={handleSend}>Send</button>;
  }
</example> 